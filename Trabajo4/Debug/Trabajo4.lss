
Trabajo4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000c76  00000d0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080011c  0080011c  00000d26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2f  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f6  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000822  00000000  00000000  00002609  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00002e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ba  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c0  00000000  00000000  000036ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003b6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  9e:	0c 94 39 06 	jmp	0xc72	; 0xc72 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:

void ADC_init()
{
	    
	    
	    ADMUX |= (1<<REFS0)  | (1<<MUX1) | (1<<MUX0); // Vref = AVcc, seleccionar ADC3
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	83 64       	ori	r24, 0x43	; 67
  ae:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS0) | (1<<ADPS1)| (1<<ADEN); // Habilitar ADC
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 68       	ori	r24, 0x83	; 131
  b8:	80 83       	st	Z, r24
		//ADCSRA |= (1<<ADSC);
		DIDR0 = (1<<ADC3D);
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  c0:	08 95       	ret

000000c2 <ADC_GetData>:

uint16_t ADC_GetData()
{
	
		// Iniciar conversión
		ADCSRA |= (1 << ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
		// Esperar a que termine la conversión
		while (ADCSRA & (1 << ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC_GetData+0xa>
		ADCSRA |= (1 << ADIF); // Reiniciar el flag
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	80 83       	st	Z, r24

		// Leer ambos bytes
		//uint16_t adcValue = (ADCH << 8) | ADCL; // Combina ADCH y ADCL
		return ADC; // Retornar el valor combinado
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	

   }
  e6:	08 95       	ret

000000e8 <PWM_soft_update>:
    PWM_soft_update();
}

void PWM_soft_update(void) {
    static uint16_t PWM_position = 0;
    if (++PWM_position >= PWM_PERIOD) {
  e8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
  ec:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
  f6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
  fa:	8f 3f       	cpi	r24, 0xFF	; 255
  fc:	91 05       	cpc	r25, r1
  fe:	20 f0       	brcs	.+8      	; 0x108 <PWM_soft_update+0x20>
        PWM_position = 0;
 100:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 104:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
    }
    if (PWM_position < intensidadRojo) {
 108:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
 10c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
 110:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <intensidadRojo>
 114:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <intensidadRojo+0x1>
 118:	28 17       	cp	r18, r24
 11a:	39 07       	cpc	r19, r25
 11c:	20 f4       	brcc	.+8      	; 0x126 <PWM_soft_update+0x3e>
        PWM_ON; // Encender el LED
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	80 62       	ori	r24, 0x20	; 32
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret
    } else {
        PWM_OFF; // Apagar el LED
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8f 7d       	andi	r24, 0xDF	; 223
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	08 95       	ret

0000012e <__vector_14>:
		}
    }
}

ISR (TIMER0_COMPA_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
    PWM_soft_update();
 150:	0e 94 74 00 	call	0xe8	; 0xe8 <PWM_soft_update>
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <print_adc_value>:
        PWM_OFF; // Apagar el LED
    }
}


void print_adc_value(uint16_t value) {
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	2a 97       	sbiw	r28, 0x0a	; 10
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
	char buffer[10]; // Buffer para almacenar la cadena
	sprintf(buffer, "ADC: %u\n\r", value); // Convertir a cadena
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	9f 93       	push	r25
 198:	8f 93       	push	r24
 19a:	8e 01       	movw	r16, r28
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	1f 93       	push	r17
 1a2:	0f 93       	push	r16
 1a4:	0e 94 4f 03 	call	0x69e	; 0x69e <sprintf>
	SerialPort_Send_String(buffer); // Enviar la cadena al puerto serie
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SerialPort_Send_String>
}
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	2a 96       	adiw	r28, 0x0a	; 10
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <main>:


int main(void)
{
    // Configuramos como salida.
    DDRB |= (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB5);	
 1d0:	84 b1       	in	r24, 0x04	; 4
 1d2:	86 62       	ori	r24, 0x26	; 38
 1d4:	84 b9       	out	0x04, r24	; 4
    SerialPort_Init(BR9600);  // Inicializo formato 8N1 y BAUDRATE = 9600bps
 1d6:	87 e6       	ldi	r24, 0x67	; 103
 1d8:	0e 94 bf 01 	call	0x37e	; 0x37e <SerialPort_Init>
    SerialPort_TX_Enable();     // Activo el Transmisor del Puerto Serie
 1dc:	0e 94 c9 01 	call	0x392	; 0x392 <SerialPort_TX_Enable>
    SerialPort_RX_Enable();     // Activo el Receptor del Puerto Serie
 1e0:	0e 94 cf 01 	call	0x39e	; 0x39e <SerialPort_RX_Enable>
    SerialPort_RX_Interrupt_Enable(); // Activo Interrupción de recepcion.
 1e4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SerialPort_RX_Interrupt_Enable>

    cli();
 1e8:	f8 94       	cli
    timer0_init();
 1ea:	0e 94 ff 01 	call	0x3fe	; 0x3fe <timer0_init>
    timer1_init();
 1ee:	0e 94 08 02 	call	0x410	; 0x410 <timer1_init>
    ADC_init();
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
    sei();
 1f6:	78 94       	sei
	
    while (1) 
    {
		if(flag_Green){
 1f8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <flag_Green>
 1fc:	88 23       	and	r24, r24
 1fe:	01 f1       	breq	.+64     	; 0x240 <main+0x70>
			// Mandar medida del potenciometro al color verde
			ext_adc = ADC_GetData(); // Leer del potenciómetro
 200:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_GetData>
 204:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ext_adc+0x1>
 208:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ext_adc>
			intensidad = ext_adc * (0.2490234) ;
 20c:	bc 01       	movw	r22, r24
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__floatunsisf>
 216:	2d ef       	ldi	r18, 0xFD	; 253
 218:	3f ef       	ldi	r19, 0xFF	; 255
 21a:	4e e7       	ldi	r20, 0x7E	; 126
 21c:	5e e3       	ldi	r21, 0x3E	; 62
 21e:	0e 94 ba 02 	call	0x574	; 0x574 <__mulsf3>
 222:	0e 94 25 02 	call	0x44a	; 0x44a <__fixunssfsi>
 226:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <intensidad+0x1>
 22a:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <intensidad>
			print_adc_value(intensidad);
 22e:	cb 01       	movw	r24, r22
 230:	0e 94 bb 00 	call	0x176	; 0x176 <print_adc_value>
			setGreen(intensidad);
 234:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <intensidad>
 238:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <intensidad+0x1>
 23c:	0e 94 20 02 	call	0x440	; 0x440 <setGreen>
		}
		
		if(flag_Blue){
 240:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <flag_Blue>
 244:	88 23       	and	r24, r24
 246:	01 f1       	breq	.+64     	; 0x288 <main+0xb8>
			// Mandar medida del potenciometro al color azul
			ext_adc = ADC_GetData(); // Leer del potenciómetro
 248:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_GetData>
 24c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ext_adc+0x1>
 250:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ext_adc>
			intensidad = ext_adc * (0.2490234) ;
 254:	bc 01       	movw	r22, r24
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__floatunsisf>
 25e:	2d ef       	ldi	r18, 0xFD	; 253
 260:	3f ef       	ldi	r19, 0xFF	; 255
 262:	4e e7       	ldi	r20, 0x7E	; 126
 264:	5e e3       	ldi	r21, 0x3E	; 62
 266:	0e 94 ba 02 	call	0x574	; 0x574 <__mulsf3>
 26a:	0e 94 25 02 	call	0x44a	; 0x44a <__fixunssfsi>
 26e:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <intensidad+0x1>
 272:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <intensidad>
			print_adc_value(intensidad);
 276:	cb 01       	movw	r24, r22
 278:	0e 94 bb 00 	call	0x176	; 0x176 <print_adc_value>
			setBlue(intensidad);
 27c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <intensidad>
 280:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <intensidad+0x1>
 284:	0e 94 1b 02 	call	0x436	; 0x436 <setBlue>
		}
		
		if(flag_Red){
 288:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <flag_Red>
 28c:	88 23       	and	r24, r24
 28e:	09 f4       	brne	.+2      	; 0x292 <main+0xc2>
 290:	b3 cf       	rjmp	.-154    	; 0x1f8 <main+0x28>
			// Mandar medida del potenciometro al color rojo
			ext_adc = ADC_GetData(); // Leer del potenciómetro
 292:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_GetData>
 296:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ext_adc+0x1>
 29a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ext_adc>
			intensidad = ext_adc * (0.2490234) ;
 29e:	bc 01       	movw	r22, r24
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__floatunsisf>
 2a8:	2d ef       	ldi	r18, 0xFD	; 253
 2aa:	3f ef       	ldi	r19, 0xFF	; 255
 2ac:	4e e7       	ldi	r20, 0x7E	; 126
 2ae:	5e e3       	ldi	r21, 0x3E	; 62
 2b0:	0e 94 ba 02 	call	0x574	; 0x574 <__mulsf3>
 2b4:	0e 94 25 02 	call	0x44a	; 0x44a <__fixunssfsi>
 2b8:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <intensidad+0x1>
 2bc:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <intensidad>
			print_adc_value(intensidad);
 2c0:	cb 01       	movw	r24, r22
 2c2:	0e 94 bb 00 	call	0x176	; 0x176 <print_adc_value>
			intensidadRojo=intensidad;
 2c6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <intensidad>
 2ca:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <intensidad+0x1>
 2ce:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <intensidadRojo+0x1>
 2d2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <intensidadRojo>
 2d6:	90 cf       	rjmp	.-224    	; 0x1f8 <main+0x28>

000002d8 <__vector_18>:
	sprintf(buffer, "ADC: %u\n\r", value); // Convertir a cadena
	SerialPort_Send_String(buffer); // Enviar la cadena al puerto serie
}

// Rutina de Servicio de Interrupción de Byte Recibido
ISR(USART_RX_vect) {
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	2f 93       	push	r18
 2e4:	3f 93       	push	r19
 2e6:	4f 93       	push	r20
 2e8:	5f 93       	push	r21
 2ea:	6f 93       	push	r22
 2ec:	7f 93       	push	r23
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	RX_Buffer = UDR0; // La lectura de UDR0 borra el flag RXC
 2fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2fe:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <RX_Buffer>

	if (RX_Buffer == 'B') { // Comprobar si el carácter recibido es 's' o 'S'
 302:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <RX_Buffer>
 306:	82 34       	cpi	r24, 0x42	; 66
 308:	59 f4       	brne	.+22     	; 0x320 <__vector_18+0x48>
		SerialPort_Send_String("blueee"); // Pausar la transmisión si ya se había iniciado
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SerialPort_Send_String>
		flag_Blue=1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <flag_Blue>
		flag_Red=0;
 318:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <flag_Red>
		flag_Green=0;
 31c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <flag_Green>
	}
	if (RX_Buffer == 'R') { // Comprobar si el carácter recibido es 's' o 'S'
 320:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <RX_Buffer>
 324:	82 35       	cpi	r24, 0x52	; 82
 326:	59 f4       	brne	.+22     	; 0x33e <__vector_18+0x66>
		SerialPort_Send_String("red"); // Pausar la transmisión si ya se había iniciado
 328:	81 e1       	ldi	r24, 0x11	; 17
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SerialPort_Send_String>

		flag_Blue=0;
 330:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <flag_Blue>
		flag_Red=1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <flag_Red>
		flag_Green=0;
 33a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <flag_Green>
	}
	if (RX_Buffer == 'G') { // Comprobar si el carácter recibido es 's' o 'S'
 33e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <RX_Buffer>
 342:	87 34       	cpi	r24, 0x47	; 71
 344:	59 f4       	brne	.+22     	; 0x35c <__vector_18+0x84>
		SerialPort_Send_String("green"); // Pausar la transmisión si ya se había iniciado
 346:	85 e1       	ldi	r24, 0x15	; 21
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SerialPort_Send_String>

		flag_Blue=0;
 34e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <flag_Blue>
		flag_Red=0;
 352:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <flag_Red>
		flag_Green=1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <flag_Green>
	}

 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 37e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 382:	96 e0       	ldi	r25, 0x06	; 6
 384:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 388:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 38c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 390:	08 95       	ret

00000392 <SerialPort_TX_Enable>:
 392:	e1 ec       	ldi	r30, 0xC1	; 193
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	88 60       	ori	r24, 0x08	; 8
 39a:	80 83       	st	Z, r24
 39c:	08 95       	ret

0000039e <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 39e:	e1 ec       	ldi	r30, 0xC1	; 193
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	80 61       	ori	r24, 0x10	; 16
 3a6:	80 83       	st	Z, r24
 3a8:	08 95       	ret

000003aa <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 3aa:	e1 ec       	ldi	r30, 0xC1	; 193
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	80 68       	ori	r24, 0x80	; 128
 3b2:	80 83       	st	Z, r24
 3b4:	08 95       	ret

000003b6 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 3b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3ba:	85 ff       	sbrs	r24, 5
 3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <SerialPort_Wait_For_TX_Buffer_Free>
}
 3be:	08 95       	ret

000003c0 <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 3c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3c4:	08 95       	ret

000003c6 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 3d6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 3da:	f8 01       	movw	r30, r16
 3dc:	80 81       	ld	r24, Z
 3de:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SerialPort_Send_Data>
		i++;
 3e2:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 3e4:	87 01       	movw	r16, r14
 3e6:	0c 0f       	add	r16, r28
 3e8:	11 1d       	adc	r17, r1
 3ea:	f8 01       	movw	r30, r16
 3ec:	80 81       	ld	r24, Z
 3ee:	81 11       	cpse	r24, r1
 3f0:	f2 cf       	rjmp	.-28     	; 0x3d6 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	08 95       	ret

000003fe <timer0_init>:
#include <avr/io.h>
#include <avr/interrupt.h>


void timer0_init(){    // Configuración del timer
	TCCR0A=0x02; // Modo CTC
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01); // Prescaler de 8
 402:	85 bd       	out	0x25, r24	; 37
	OCR0A = 20;
 404:	94 e1       	ldi	r25, 0x14	; 20
 406:	97 bd       	out	0x27, r25	; 39
	TIMSK0=0x02; // Habilito Interrupción por comparación
 408:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();    // Se activan las interrupciones
 40c:	78 94       	sei
 40e:	08 95       	ret

00000410 <timer1_init>:
}

// Configuramos el timer con una frecuencia de 7812.5 Hz, mayor a los 50 Hz requeridos
// Inicialmente configuaramos el comparadoer en 0, led apagado
void timer1_init(){
	OCR1A = 0;							// Blue
 410:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 414:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0;							// Verde
 418:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 41c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);	// Modo 5 fast no invertido
 420:	81 ea       	ldi	r24, 0xA1	; 161
 422:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B =  (1<<WGM12) | (1<<CS10);		// prescaler 8
 426:	89 e0       	ldi	r24, 0x09	; 9
 428:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Reiniciar contador a cero 
	TCNT1 = 0;
 42c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 430:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 434:	08 95       	ret

00000436 <setBlue>:
}

void setBlue (uint16_t intensidad){
	OCR1A = intensidad;
 436:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 43a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 43e:	08 95       	ret

00000440 <setGreen>:
}
void setGreen (uint16_t intensidad){
	OCR1B = intensidad;
 440:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 444:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 448:	08 95       	ret

0000044a <__fixunssfsi>:
 44a:	0e 94 99 02 	call	0x532	; 0x532 <__fp_splitA>
 44e:	88 f0       	brcs	.+34     	; 0x472 <__fixunssfsi+0x28>
 450:	9f 57       	subi	r25, 0x7F	; 127
 452:	98 f0       	brcs	.+38     	; 0x47a <__fixunssfsi+0x30>
 454:	b9 2f       	mov	r27, r25
 456:	99 27       	eor	r25, r25
 458:	b7 51       	subi	r27, 0x17	; 23
 45a:	b0 f0       	brcs	.+44     	; 0x488 <__fixunssfsi+0x3e>
 45c:	e1 f0       	breq	.+56     	; 0x496 <__fixunssfsi+0x4c>
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	88 1f       	adc	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	1a f0       	brmi	.+6      	; 0x46e <__fixunssfsi+0x24>
 468:	ba 95       	dec	r27
 46a:	c9 f7       	brne	.-14     	; 0x45e <__fixunssfsi+0x14>
 46c:	14 c0       	rjmp	.+40     	; 0x496 <__fixunssfsi+0x4c>
 46e:	b1 30       	cpi	r27, 0x01	; 1
 470:	91 f0       	breq	.+36     	; 0x496 <__fixunssfsi+0x4c>
 472:	0e 94 b3 02 	call	0x566	; 0x566 <__fp_zero>
 476:	b1 e0       	ldi	r27, 0x01	; 1
 478:	08 95       	ret
 47a:	0c 94 b3 02 	jmp	0x566	; 0x566 <__fp_zero>
 47e:	67 2f       	mov	r22, r23
 480:	78 2f       	mov	r23, r24
 482:	88 27       	eor	r24, r24
 484:	b8 5f       	subi	r27, 0xF8	; 248
 486:	39 f0       	breq	.+14     	; 0x496 <__fixunssfsi+0x4c>
 488:	b9 3f       	cpi	r27, 0xF9	; 249
 48a:	cc f3       	brlt	.-14     	; 0x47e <__fixunssfsi+0x34>
 48c:	86 95       	lsr	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b3 95       	inc	r27
 494:	d9 f7       	brne	.-10     	; 0x48c <__fixunssfsi+0x42>
 496:	3e f4       	brtc	.+14     	; 0x4a6 <__fixunssfsi+0x5c>
 498:	90 95       	com	r25
 49a:	80 95       	com	r24
 49c:	70 95       	com	r23
 49e:	61 95       	neg	r22
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	08 95       	ret

000004a8 <__floatunsisf>:
 4a8:	e8 94       	clt
 4aa:	09 c0       	rjmp	.+18     	; 0x4be <__floatsisf+0x12>

000004ac <__floatsisf>:
 4ac:	97 fb       	bst	r25, 7
 4ae:	3e f4       	brtc	.+14     	; 0x4be <__floatsisf+0x12>
 4b0:	90 95       	com	r25
 4b2:	80 95       	com	r24
 4b4:	70 95       	com	r23
 4b6:	61 95       	neg	r22
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	8f 4f       	sbci	r24, 0xFF	; 255
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	99 23       	and	r25, r25
 4c0:	a9 f0       	breq	.+42     	; 0x4ec <__floatsisf+0x40>
 4c2:	f9 2f       	mov	r31, r25
 4c4:	96 e9       	ldi	r25, 0x96	; 150
 4c6:	bb 27       	eor	r27, r27
 4c8:	93 95       	inc	r25
 4ca:	f6 95       	lsr	r31
 4cc:	87 95       	ror	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b7 95       	ror	r27
 4d4:	f1 11       	cpse	r31, r1
 4d6:	f8 cf       	rjmp	.-16     	; 0x4c8 <__floatsisf+0x1c>
 4d8:	fa f4       	brpl	.+62     	; 0x518 <__floatsisf+0x6c>
 4da:	bb 0f       	add	r27, r27
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__floatsisf+0x36>
 4de:	60 ff       	sbrs	r22, 0
 4e0:	1b c0       	rjmp	.+54     	; 0x518 <__floatsisf+0x6c>
 4e2:	6f 5f       	subi	r22, 0xFF	; 255
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	8f 4f       	sbci	r24, 0xFF	; 255
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	16 c0       	rjmp	.+44     	; 0x518 <__floatsisf+0x6c>
 4ec:	88 23       	and	r24, r24
 4ee:	11 f0       	breq	.+4      	; 0x4f4 <__floatsisf+0x48>
 4f0:	96 e9       	ldi	r25, 0x96	; 150
 4f2:	11 c0       	rjmp	.+34     	; 0x516 <__floatsisf+0x6a>
 4f4:	77 23       	and	r23, r23
 4f6:	21 f0       	breq	.+8      	; 0x500 <__floatsisf+0x54>
 4f8:	9e e8       	ldi	r25, 0x8E	; 142
 4fa:	87 2f       	mov	r24, r23
 4fc:	76 2f       	mov	r23, r22
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <__floatsisf+0x5e>
 500:	66 23       	and	r22, r22
 502:	71 f0       	breq	.+28     	; 0x520 <__floatsisf+0x74>
 504:	96 e8       	ldi	r25, 0x86	; 134
 506:	86 2f       	mov	r24, r22
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	2a f0       	brmi	.+10     	; 0x518 <__floatsisf+0x6c>
 50e:	9a 95       	dec	r25
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	88 1f       	adc	r24, r24
 516:	da f7       	brpl	.-10     	; 0x50e <__floatsisf+0x62>
 518:	88 0f       	add	r24, r24
 51a:	96 95       	lsr	r25
 51c:	87 95       	ror	r24
 51e:	97 f9       	bld	r25, 7
 520:	08 95       	ret

00000522 <__fp_split3>:
 522:	57 fd       	sbrc	r21, 7
 524:	90 58       	subi	r25, 0x80	; 128
 526:	44 0f       	add	r20, r20
 528:	55 1f       	adc	r21, r21
 52a:	59 f0       	breq	.+22     	; 0x542 <__fp_splitA+0x10>
 52c:	5f 3f       	cpi	r21, 0xFF	; 255
 52e:	71 f0       	breq	.+28     	; 0x54c <__fp_splitA+0x1a>
 530:	47 95       	ror	r20

00000532 <__fp_splitA>:
 532:	88 0f       	add	r24, r24
 534:	97 fb       	bst	r25, 7
 536:	99 1f       	adc	r25, r25
 538:	61 f0       	breq	.+24     	; 0x552 <__fp_splitA+0x20>
 53a:	9f 3f       	cpi	r25, 0xFF	; 255
 53c:	79 f0       	breq	.+30     	; 0x55c <__fp_splitA+0x2a>
 53e:	87 95       	ror	r24
 540:	08 95       	ret
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	55 1f       	adc	r21, r21
 54a:	f2 cf       	rjmp	.-28     	; 0x530 <__fp_split3+0xe>
 54c:	46 95       	lsr	r20
 54e:	f1 df       	rcall	.-30     	; 0x532 <__fp_splitA>
 550:	08 c0       	rjmp	.+16     	; 0x562 <__fp_splitA+0x30>
 552:	16 16       	cp	r1, r22
 554:	17 06       	cpc	r1, r23
 556:	18 06       	cpc	r1, r24
 558:	99 1f       	adc	r25, r25
 55a:	f1 cf       	rjmp	.-30     	; 0x53e <__fp_splitA+0xc>
 55c:	86 95       	lsr	r24
 55e:	71 05       	cpc	r23, r1
 560:	61 05       	cpc	r22, r1
 562:	08 94       	sec
 564:	08 95       	ret

00000566 <__fp_zero>:
 566:	e8 94       	clt

00000568 <__fp_szero>:
 568:	bb 27       	eor	r27, r27
 56a:	66 27       	eor	r22, r22
 56c:	77 27       	eor	r23, r23
 56e:	cb 01       	movw	r24, r22
 570:	97 f9       	bld	r25, 7
 572:	08 95       	ret

00000574 <__mulsf3>:
 574:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsf3x>
 578:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_round>
 57c:	0e 94 30 03 	call	0x660	; 0x660 <__fp_pscA>
 580:	38 f0       	brcs	.+14     	; 0x590 <__mulsf3+0x1c>
 582:	0e 94 37 03 	call	0x66e	; 0x66e <__fp_pscB>
 586:	20 f0       	brcs	.+8      	; 0x590 <__mulsf3+0x1c>
 588:	95 23       	and	r25, r21
 58a:	11 f0       	breq	.+4      	; 0x590 <__mulsf3+0x1c>
 58c:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_inf>
 590:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__fp_nan>
 594:	11 24       	eor	r1, r1
 596:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_szero>

0000059a <__mulsf3x>:
 59a:	0e 94 91 02 	call	0x522	; 0x522 <__fp_split3>
 59e:	70 f3       	brcs	.-36     	; 0x57c <__mulsf3+0x8>

000005a0 <__mulsf3_pse>:
 5a0:	95 9f       	mul	r25, r21
 5a2:	c1 f3       	breq	.-16     	; 0x594 <__mulsf3+0x20>
 5a4:	95 0f       	add	r25, r21
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	55 1f       	adc	r21, r21
 5aa:	62 9f       	mul	r22, r18
 5ac:	f0 01       	movw	r30, r0
 5ae:	72 9f       	mul	r23, r18
 5b0:	bb 27       	eor	r27, r27
 5b2:	f0 0d       	add	r31, r0
 5b4:	b1 1d       	adc	r27, r1
 5b6:	63 9f       	mul	r22, r19
 5b8:	aa 27       	eor	r26, r26
 5ba:	f0 0d       	add	r31, r0
 5bc:	b1 1d       	adc	r27, r1
 5be:	aa 1f       	adc	r26, r26
 5c0:	64 9f       	mul	r22, r20
 5c2:	66 27       	eor	r22, r22
 5c4:	b0 0d       	add	r27, r0
 5c6:	a1 1d       	adc	r26, r1
 5c8:	66 1f       	adc	r22, r22
 5ca:	82 9f       	mul	r24, r18
 5cc:	22 27       	eor	r18, r18
 5ce:	b0 0d       	add	r27, r0
 5d0:	a1 1d       	adc	r26, r1
 5d2:	62 1f       	adc	r22, r18
 5d4:	73 9f       	mul	r23, r19
 5d6:	b0 0d       	add	r27, r0
 5d8:	a1 1d       	adc	r26, r1
 5da:	62 1f       	adc	r22, r18
 5dc:	83 9f       	mul	r24, r19
 5de:	a0 0d       	add	r26, r0
 5e0:	61 1d       	adc	r22, r1
 5e2:	22 1f       	adc	r18, r18
 5e4:	74 9f       	mul	r23, r20
 5e6:	33 27       	eor	r19, r19
 5e8:	a0 0d       	add	r26, r0
 5ea:	61 1d       	adc	r22, r1
 5ec:	23 1f       	adc	r18, r19
 5ee:	84 9f       	mul	r24, r20
 5f0:	60 0d       	add	r22, r0
 5f2:	21 1d       	adc	r18, r1
 5f4:	82 2f       	mov	r24, r18
 5f6:	76 2f       	mov	r23, r22
 5f8:	6a 2f       	mov	r22, r26
 5fa:	11 24       	eor	r1, r1
 5fc:	9f 57       	subi	r25, 0x7F	; 127
 5fe:	50 40       	sbci	r21, 0x00	; 0
 600:	9a f0       	brmi	.+38     	; 0x628 <__mulsf3_pse+0x88>
 602:	f1 f0       	breq	.+60     	; 0x640 <__mulsf3_pse+0xa0>
 604:	88 23       	and	r24, r24
 606:	4a f0       	brmi	.+18     	; 0x61a <__mulsf3_pse+0x7a>
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	bb 1f       	adc	r27, r27
 60e:	66 1f       	adc	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	91 50       	subi	r25, 0x01	; 1
 616:	50 40       	sbci	r21, 0x00	; 0
 618:	a9 f7       	brne	.-22     	; 0x604 <__mulsf3_pse+0x64>
 61a:	9e 3f       	cpi	r25, 0xFE	; 254
 61c:	51 05       	cpc	r21, r1
 61e:	80 f0       	brcs	.+32     	; 0x640 <__mulsf3_pse+0xa0>
 620:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_inf>
 624:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_szero>
 628:	5f 3f       	cpi	r21, 0xFF	; 255
 62a:	e4 f3       	brlt	.-8      	; 0x624 <__mulsf3_pse+0x84>
 62c:	98 3e       	cpi	r25, 0xE8	; 232
 62e:	d4 f3       	brlt	.-12     	; 0x624 <__mulsf3_pse+0x84>
 630:	86 95       	lsr	r24
 632:	77 95       	ror	r23
 634:	67 95       	ror	r22
 636:	b7 95       	ror	r27
 638:	f7 95       	ror	r31
 63a:	e7 95       	ror	r30
 63c:	9f 5f       	subi	r25, 0xFF	; 255
 63e:	c1 f7       	brne	.-16     	; 0x630 <__mulsf3_pse+0x90>
 640:	fe 2b       	or	r31, r30
 642:	88 0f       	add	r24, r24
 644:	91 1d       	adc	r25, r1
 646:	96 95       	lsr	r25
 648:	87 95       	ror	r24
 64a:	97 f9       	bld	r25, 7
 64c:	08 95       	ret

0000064e <__fp_inf>:
 64e:	97 f9       	bld	r25, 7
 650:	9f 67       	ori	r25, 0x7F	; 127
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	08 95       	ret

0000065a <__fp_nan>:
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	08 95       	ret

00000660 <__fp_pscA>:
 660:	00 24       	eor	r0, r0
 662:	0a 94       	dec	r0
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	18 06       	cpc	r1, r24
 66a:	09 06       	cpc	r0, r25
 66c:	08 95       	ret

0000066e <__fp_pscB>:
 66e:	00 24       	eor	r0, r0
 670:	0a 94       	dec	r0
 672:	12 16       	cp	r1, r18
 674:	13 06       	cpc	r1, r19
 676:	14 06       	cpc	r1, r20
 678:	05 06       	cpc	r0, r21
 67a:	08 95       	ret

0000067c <__fp_round>:
 67c:	09 2e       	mov	r0, r25
 67e:	03 94       	inc	r0
 680:	00 0c       	add	r0, r0
 682:	11 f4       	brne	.+4      	; 0x688 <__fp_round+0xc>
 684:	88 23       	and	r24, r24
 686:	52 f0       	brmi	.+20     	; 0x69c <__fp_round+0x20>
 688:	bb 0f       	add	r27, r27
 68a:	40 f4       	brcc	.+16     	; 0x69c <__fp_round+0x20>
 68c:	bf 2b       	or	r27, r31
 68e:	11 f4       	brne	.+4      	; 0x694 <__fp_round+0x18>
 690:	60 ff       	sbrs	r22, 0
 692:	04 c0       	rjmp	.+8      	; 0x69c <__fp_round+0x20>
 694:	6f 5f       	subi	r22, 0xFF	; 255
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	08 95       	ret

0000069e <sprintf>:
 69e:	ae e0       	ldi	r26, 0x0E	; 14
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e5 e5       	ldi	r30, 0x55	; 85
 6a4:	f3 e0       	ldi	r31, 0x03	; 3
 6a6:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__prologue_saves__+0x1c>
 6aa:	0d 89       	ldd	r16, Y+21	; 0x15
 6ac:	1e 89       	ldd	r17, Y+22	; 0x16
 6ae:	86 e0       	ldi	r24, 0x06	; 6
 6b0:	8c 83       	std	Y+4, r24	; 0x04
 6b2:	1a 83       	std	Y+2, r17	; 0x02
 6b4:	09 83       	std	Y+1, r16	; 0x01
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	9f e7       	ldi	r25, 0x7F	; 127
 6ba:	9e 83       	std	Y+6, r25	; 0x06
 6bc:	8d 83       	std	Y+5, r24	; 0x05
 6be:	ae 01       	movw	r20, r28
 6c0:	47 5e       	subi	r20, 0xE7	; 231
 6c2:	5f 4f       	sbci	r21, 0xFF	; 255
 6c4:	6f 89       	ldd	r22, Y+23	; 0x17
 6c6:	78 8d       	ldd	r23, Y+24	; 0x18
 6c8:	ce 01       	movw	r24, r28
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vfprintf>
 6d0:	ef 81       	ldd	r30, Y+7	; 0x07
 6d2:	f8 85       	ldd	r31, Y+8	; 0x08
 6d4:	e0 0f       	add	r30, r16
 6d6:	f1 1f       	adc	r31, r17
 6d8:	10 82       	st	Z, r1
 6da:	2e 96       	adiw	r28, 0x0e	; 14
 6dc:	e4 e0       	ldi	r30, 0x04	; 4
 6de:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__epilogue_restores__+0x1c>

000006e2 <vfprintf>:
 6e2:	ab e0       	ldi	r26, 0x0B	; 11
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
 6e6:	e7 e7       	ldi	r30, 0x77	; 119
 6e8:	f3 e0       	ldi	r31, 0x03	; 3
 6ea:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__prologue_saves__>
 6ee:	6c 01       	movw	r12, r24
 6f0:	7b 01       	movw	r14, r22
 6f2:	8a 01       	movw	r16, r20
 6f4:	fc 01       	movw	r30, r24
 6f6:	17 82       	std	Z+7, r1	; 0x07
 6f8:	16 82       	std	Z+6, r1	; 0x06
 6fa:	83 81       	ldd	r24, Z+3	; 0x03
 6fc:	81 ff       	sbrs	r24, 1
 6fe:	cc c1       	rjmp	.+920    	; 0xa98 <__stack+0x199>
 700:	ce 01       	movw	r24, r28
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	3c 01       	movw	r6, r24
 706:	f6 01       	movw	r30, r12
 708:	93 81       	ldd	r25, Z+3	; 0x03
 70a:	f7 01       	movw	r30, r14
 70c:	93 fd       	sbrc	r25, 3
 70e:	85 91       	lpm	r24, Z+
 710:	93 ff       	sbrs	r25, 3
 712:	81 91       	ld	r24, Z+
 714:	7f 01       	movw	r14, r30
 716:	88 23       	and	r24, r24
 718:	09 f4       	brne	.+2      	; 0x71c <vfprintf+0x3a>
 71a:	ba c1       	rjmp	.+884    	; 0xa90 <__stack+0x191>
 71c:	85 32       	cpi	r24, 0x25	; 37
 71e:	39 f4       	brne	.+14     	; 0x72e <vfprintf+0x4c>
 720:	93 fd       	sbrc	r25, 3
 722:	85 91       	lpm	r24, Z+
 724:	93 ff       	sbrs	r25, 3
 726:	81 91       	ld	r24, Z+
 728:	7f 01       	movw	r14, r30
 72a:	85 32       	cpi	r24, 0x25	; 37
 72c:	29 f4       	brne	.+10     	; 0x738 <vfprintf+0x56>
 72e:	b6 01       	movw	r22, r12
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 736:	e7 cf       	rjmp	.-50     	; 0x706 <vfprintf+0x24>
 738:	91 2c       	mov	r9, r1
 73a:	21 2c       	mov	r2, r1
 73c:	31 2c       	mov	r3, r1
 73e:	ff e1       	ldi	r31, 0x1F	; 31
 740:	f3 15       	cp	r31, r3
 742:	d8 f0       	brcs	.+54     	; 0x77a <vfprintf+0x98>
 744:	8b 32       	cpi	r24, 0x2B	; 43
 746:	79 f0       	breq	.+30     	; 0x766 <vfprintf+0x84>
 748:	38 f4       	brcc	.+14     	; 0x758 <vfprintf+0x76>
 74a:	80 32       	cpi	r24, 0x20	; 32
 74c:	79 f0       	breq	.+30     	; 0x76c <vfprintf+0x8a>
 74e:	83 32       	cpi	r24, 0x23	; 35
 750:	a1 f4       	brne	.+40     	; 0x77a <vfprintf+0x98>
 752:	23 2d       	mov	r18, r3
 754:	20 61       	ori	r18, 0x10	; 16
 756:	1d c0       	rjmp	.+58     	; 0x792 <vfprintf+0xb0>
 758:	8d 32       	cpi	r24, 0x2D	; 45
 75a:	61 f0       	breq	.+24     	; 0x774 <vfprintf+0x92>
 75c:	80 33       	cpi	r24, 0x30	; 48
 75e:	69 f4       	brne	.+26     	; 0x77a <vfprintf+0x98>
 760:	23 2d       	mov	r18, r3
 762:	21 60       	ori	r18, 0x01	; 1
 764:	16 c0       	rjmp	.+44     	; 0x792 <vfprintf+0xb0>
 766:	83 2d       	mov	r24, r3
 768:	82 60       	ori	r24, 0x02	; 2
 76a:	38 2e       	mov	r3, r24
 76c:	e3 2d       	mov	r30, r3
 76e:	e4 60       	ori	r30, 0x04	; 4
 770:	3e 2e       	mov	r3, r30
 772:	2a c0       	rjmp	.+84     	; 0x7c8 <vfprintf+0xe6>
 774:	f3 2d       	mov	r31, r3
 776:	f8 60       	ori	r31, 0x08	; 8
 778:	1d c0       	rjmp	.+58     	; 0x7b4 <vfprintf+0xd2>
 77a:	37 fc       	sbrc	r3, 7
 77c:	2d c0       	rjmp	.+90     	; 0x7d8 <vfprintf+0xf6>
 77e:	20 ed       	ldi	r18, 0xD0	; 208
 780:	28 0f       	add	r18, r24
 782:	2a 30       	cpi	r18, 0x0A	; 10
 784:	40 f0       	brcs	.+16     	; 0x796 <vfprintf+0xb4>
 786:	8e 32       	cpi	r24, 0x2E	; 46
 788:	b9 f4       	brne	.+46     	; 0x7b8 <vfprintf+0xd6>
 78a:	36 fc       	sbrc	r3, 6
 78c:	81 c1       	rjmp	.+770    	; 0xa90 <__stack+0x191>
 78e:	23 2d       	mov	r18, r3
 790:	20 64       	ori	r18, 0x40	; 64
 792:	32 2e       	mov	r3, r18
 794:	19 c0       	rjmp	.+50     	; 0x7c8 <vfprintf+0xe6>
 796:	36 fe       	sbrs	r3, 6
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0xc4>
 79a:	8a e0       	ldi	r24, 0x0A	; 10
 79c:	98 9e       	mul	r9, r24
 79e:	20 0d       	add	r18, r0
 7a0:	11 24       	eor	r1, r1
 7a2:	92 2e       	mov	r9, r18
 7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <vfprintf+0xe6>
 7a6:	ea e0       	ldi	r30, 0x0A	; 10
 7a8:	2e 9e       	mul	r2, r30
 7aa:	20 0d       	add	r18, r0
 7ac:	11 24       	eor	r1, r1
 7ae:	22 2e       	mov	r2, r18
 7b0:	f3 2d       	mov	r31, r3
 7b2:	f0 62       	ori	r31, 0x20	; 32
 7b4:	3f 2e       	mov	r3, r31
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <vfprintf+0xe6>
 7b8:	8c 36       	cpi	r24, 0x6C	; 108
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <vfprintf+0xe2>
 7bc:	83 2d       	mov	r24, r3
 7be:	80 68       	ori	r24, 0x80	; 128
 7c0:	38 2e       	mov	r3, r24
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0xe6>
 7c4:	88 36       	cpi	r24, 0x68	; 104
 7c6:	41 f4       	brne	.+16     	; 0x7d8 <vfprintf+0xf6>
 7c8:	f7 01       	movw	r30, r14
 7ca:	93 fd       	sbrc	r25, 3
 7cc:	85 91       	lpm	r24, Z+
 7ce:	93 ff       	sbrs	r25, 3
 7d0:	81 91       	ld	r24, Z+
 7d2:	7f 01       	movw	r14, r30
 7d4:	81 11       	cpse	r24, r1
 7d6:	b3 cf       	rjmp	.-154    	; 0x73e <vfprintf+0x5c>
 7d8:	98 2f       	mov	r25, r24
 7da:	9f 7d       	andi	r25, 0xDF	; 223
 7dc:	95 54       	subi	r25, 0x45	; 69
 7de:	93 30       	cpi	r25, 0x03	; 3
 7e0:	28 f4       	brcc	.+10     	; 0x7ec <vfprintf+0x10a>
 7e2:	0c 5f       	subi	r16, 0xFC	; 252
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	9f e3       	ldi	r25, 0x3F	; 63
 7e8:	99 83       	std	Y+1, r25	; 0x01
 7ea:	0d c0       	rjmp	.+26     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ec:	83 36       	cpi	r24, 0x63	; 99
 7ee:	31 f0       	breq	.+12     	; 0x7fc <vfprintf+0x11a>
 7f0:	83 37       	cpi	r24, 0x73	; 115
 7f2:	71 f0       	breq	.+28     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7f4:	83 35       	cpi	r24, 0x53	; 83
 7f6:	09 f0       	breq	.+2      	; 0x7fa <vfprintf+0x118>
 7f8:	59 c0       	rjmp	.+178    	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 7fa:	21 c0       	rjmp	.+66     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 7fc:	f8 01       	movw	r30, r16
 7fe:	80 81       	ld	r24, Z
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	0e 5f       	subi	r16, 0xFE	; 254
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	88 24       	eor	r8, r8
 808:	83 94       	inc	r8
 80a:	91 2c       	mov	r9, r1
 80c:	53 01       	movw	r10, r6
 80e:	13 c0       	rjmp	.+38     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 810:	28 01       	movw	r4, r16
 812:	f2 e0       	ldi	r31, 0x02	; 2
 814:	4f 0e       	add	r4, r31
 816:	51 1c       	adc	r5, r1
 818:	f8 01       	movw	r30, r16
 81a:	a0 80       	ld	r10, Z
 81c:	b1 80       	ldd	r11, Z+1	; 0x01
 81e:	36 fe       	sbrs	r3, 6
 820:	03 c0       	rjmp	.+6      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 822:	69 2d       	mov	r22, r9
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 828:	6f ef       	ldi	r22, 0xFF	; 255
 82a:	7f ef       	ldi	r23, 0xFF	; 255
 82c:	c5 01       	movw	r24, r10
 82e:	0e 94 5d 05 	call	0xaba	; 0xaba <strnlen>
 832:	4c 01       	movw	r8, r24
 834:	82 01       	movw	r16, r4
 836:	f3 2d       	mov	r31, r3
 838:	ff 77       	andi	r31, 0x7F	; 127
 83a:	3f 2e       	mov	r3, r31
 83c:	16 c0       	rjmp	.+44     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 83e:	28 01       	movw	r4, r16
 840:	22 e0       	ldi	r18, 0x02	; 2
 842:	42 0e       	add	r4, r18
 844:	51 1c       	adc	r5, r1
 846:	f8 01       	movw	r30, r16
 848:	a0 80       	ld	r10, Z
 84a:	b1 80       	ldd	r11, Z+1	; 0x01
 84c:	36 fe       	sbrs	r3, 6
 84e:	03 c0       	rjmp	.+6      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 850:	69 2d       	mov	r22, r9
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	6f ef       	ldi	r22, 0xFF	; 255
 858:	7f ef       	ldi	r23, 0xFF	; 255
 85a:	c5 01       	movw	r24, r10
 85c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <strnlen_P>
 860:	4c 01       	movw	r8, r24
 862:	f3 2d       	mov	r31, r3
 864:	f0 68       	ori	r31, 0x80	; 128
 866:	3f 2e       	mov	r3, r31
 868:	82 01       	movw	r16, r4
 86a:	33 fc       	sbrc	r3, 3
 86c:	1b c0       	rjmp	.+54     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 86e:	82 2d       	mov	r24, r2
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	88 16       	cp	r8, r24
 874:	99 06       	cpc	r9, r25
 876:	b0 f4       	brcc	.+44     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 878:	b6 01       	movw	r22, r12
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 882:	2a 94       	dec	r2
 884:	f4 cf       	rjmp	.-24     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 886:	f5 01       	movw	r30, r10
 888:	37 fc       	sbrc	r3, 7
 88a:	85 91       	lpm	r24, Z+
 88c:	37 fe       	sbrs	r3, 7
 88e:	81 91       	ld	r24, Z+
 890:	5f 01       	movw	r10, r30
 892:	b6 01       	movw	r22, r12
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 89a:	21 10       	cpse	r2, r1
 89c:	2a 94       	dec	r2
 89e:	21 e0       	ldi	r18, 0x01	; 1
 8a0:	82 1a       	sub	r8, r18
 8a2:	91 08       	sbc	r9, r1
 8a4:	81 14       	cp	r8, r1
 8a6:	91 04       	cpc	r9, r1
 8a8:	71 f7       	brne	.-36     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 8aa:	e8 c0       	rjmp	.+464    	; 0xa7c <__stack+0x17d>
 8ac:	84 36       	cpi	r24, 0x64	; 100
 8ae:	11 f0       	breq	.+4      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8b0:	89 36       	cpi	r24, 0x69	; 105
 8b2:	41 f5       	brne	.+80     	; 0x904 <__stack+0x5>
 8b4:	f8 01       	movw	r30, r16
 8b6:	37 fe       	sbrs	r3, 7
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	82 81       	ldd	r24, Z+2	; 0x02
 8c0:	93 81       	ldd	r25, Z+3	; 0x03
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	07 2e       	mov	r0, r23
 8ce:	00 0c       	add	r0, r0
 8d0:	88 0b       	sbc	r24, r24
 8d2:	99 0b       	sbc	r25, r25
 8d4:	0e 5f       	subi	r16, 0xFE	; 254
 8d6:	1f 4f       	sbci	r17, 0xFF	; 255
 8d8:	f3 2d       	mov	r31, r3
 8da:	ff 76       	andi	r31, 0x6F	; 111
 8dc:	3f 2e       	mov	r3, r31
 8de:	97 ff       	sbrs	r25, 7
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	f0 68       	ori	r31, 0x80	; 128
 8f2:	3f 2e       	mov	r3, r31
 8f4:	2a e0       	ldi	r18, 0x0A	; 10
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	a3 01       	movw	r20, r6
 8fa:	0e 94 a4 05 	call	0xb48	; 0xb48 <__ultoa_invert>
 8fe:	88 2e       	mov	r8, r24
 900:	86 18       	sub	r8, r6
 902:	45 c0       	rjmp	.+138    	; 0x98e <__stack+0x8f>
 904:	85 37       	cpi	r24, 0x75	; 117
 906:	31 f4       	brne	.+12     	; 0x914 <__stack+0x15>
 908:	23 2d       	mov	r18, r3
 90a:	2f 7e       	andi	r18, 0xEF	; 239
 90c:	b2 2e       	mov	r11, r18
 90e:	2a e0       	ldi	r18, 0x0A	; 10
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	25 c0       	rjmp	.+74     	; 0x95e <__stack+0x5f>
 914:	93 2d       	mov	r25, r3
 916:	99 7f       	andi	r25, 0xF9	; 249
 918:	b9 2e       	mov	r11, r25
 91a:	8f 36       	cpi	r24, 0x6F	; 111
 91c:	c1 f0       	breq	.+48     	; 0x94e <__stack+0x4f>
 91e:	18 f4       	brcc	.+6      	; 0x926 <__stack+0x27>
 920:	88 35       	cpi	r24, 0x58	; 88
 922:	79 f0       	breq	.+30     	; 0x942 <__stack+0x43>
 924:	b5 c0       	rjmp	.+362    	; 0xa90 <__stack+0x191>
 926:	80 37       	cpi	r24, 0x70	; 112
 928:	19 f0       	breq	.+6      	; 0x930 <__stack+0x31>
 92a:	88 37       	cpi	r24, 0x78	; 120
 92c:	21 f0       	breq	.+8      	; 0x936 <__stack+0x37>
 92e:	b0 c0       	rjmp	.+352    	; 0xa90 <__stack+0x191>
 930:	e9 2f       	mov	r30, r25
 932:	e0 61       	ori	r30, 0x10	; 16
 934:	be 2e       	mov	r11, r30
 936:	b4 fe       	sbrs	r11, 4
 938:	0d c0       	rjmp	.+26     	; 0x954 <__stack+0x55>
 93a:	fb 2d       	mov	r31, r11
 93c:	f4 60       	ori	r31, 0x04	; 4
 93e:	bf 2e       	mov	r11, r31
 940:	09 c0       	rjmp	.+18     	; 0x954 <__stack+0x55>
 942:	34 fe       	sbrs	r3, 4
 944:	0a c0       	rjmp	.+20     	; 0x95a <__stack+0x5b>
 946:	29 2f       	mov	r18, r25
 948:	26 60       	ori	r18, 0x06	; 6
 94a:	b2 2e       	mov	r11, r18
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__stack+0x5b>
 94e:	28 e0       	ldi	r18, 0x08	; 8
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	05 c0       	rjmp	.+10     	; 0x95e <__stack+0x5f>
 954:	20 e1       	ldi	r18, 0x10	; 16
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
 95a:	20 e1       	ldi	r18, 0x10	; 16
 95c:	32 e0       	ldi	r19, 0x02	; 2
 95e:	f8 01       	movw	r30, r16
 960:	b7 fe       	sbrs	r11, 7
 962:	07 c0       	rjmp	.+14     	; 0x972 <__stack+0x73>
 964:	60 81       	ld	r22, Z
 966:	71 81       	ldd	r23, Z+1	; 0x01
 968:	82 81       	ldd	r24, Z+2	; 0x02
 96a:	93 81       	ldd	r25, Z+3	; 0x03
 96c:	0c 5f       	subi	r16, 0xFC	; 252
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	06 c0       	rjmp	.+12     	; 0x97e <__stack+0x7f>
 972:	60 81       	ld	r22, Z
 974:	71 81       	ldd	r23, Z+1	; 0x01
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 5f       	subi	r16, 0xFE	; 254
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	a3 01       	movw	r20, r6
 980:	0e 94 a4 05 	call	0xb48	; 0xb48 <__ultoa_invert>
 984:	88 2e       	mov	r8, r24
 986:	86 18       	sub	r8, r6
 988:	fb 2d       	mov	r31, r11
 98a:	ff 77       	andi	r31, 0x7F	; 127
 98c:	3f 2e       	mov	r3, r31
 98e:	36 fe       	sbrs	r3, 6
 990:	0d c0       	rjmp	.+26     	; 0x9ac <__stack+0xad>
 992:	23 2d       	mov	r18, r3
 994:	2e 7f       	andi	r18, 0xFE	; 254
 996:	a2 2e       	mov	r10, r18
 998:	89 14       	cp	r8, r9
 99a:	58 f4       	brcc	.+22     	; 0x9b2 <__stack+0xb3>
 99c:	34 fe       	sbrs	r3, 4
 99e:	0b c0       	rjmp	.+22     	; 0x9b6 <__stack+0xb7>
 9a0:	32 fc       	sbrc	r3, 2
 9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__stack+0xb7>
 9a4:	83 2d       	mov	r24, r3
 9a6:	8e 7e       	andi	r24, 0xEE	; 238
 9a8:	a8 2e       	mov	r10, r24
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <__stack+0xb7>
 9ac:	b8 2c       	mov	r11, r8
 9ae:	a3 2c       	mov	r10, r3
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	b8 2c       	mov	r11, r8
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <__stack+0xb9>
 9b6:	b9 2c       	mov	r11, r9
 9b8:	a4 fe       	sbrs	r10, 4
 9ba:	0f c0       	rjmp	.+30     	; 0x9da <__stack+0xdb>
 9bc:	fe 01       	movw	r30, r28
 9be:	e8 0d       	add	r30, r8
 9c0:	f1 1d       	adc	r31, r1
 9c2:	80 81       	ld	r24, Z
 9c4:	80 33       	cpi	r24, 0x30	; 48
 9c6:	21 f4       	brne	.+8      	; 0x9d0 <__stack+0xd1>
 9c8:	9a 2d       	mov	r25, r10
 9ca:	99 7e       	andi	r25, 0xE9	; 233
 9cc:	a9 2e       	mov	r10, r25
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__stack+0xe3>
 9d0:	a2 fe       	sbrs	r10, 2
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <__stack+0xe1>
 9d4:	b3 94       	inc	r11
 9d6:	b3 94       	inc	r11
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__stack+0xe3>
 9da:	8a 2d       	mov	r24, r10
 9dc:	86 78       	andi	r24, 0x86	; 134
 9de:	09 f0       	breq	.+2      	; 0x9e2 <__stack+0xe3>
 9e0:	b3 94       	inc	r11
 9e2:	a3 fc       	sbrc	r10, 3
 9e4:	11 c0       	rjmp	.+34     	; 0xa08 <__stack+0x109>
 9e6:	a0 fe       	sbrs	r10, 0
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0xf7>
 9ea:	b2 14       	cp	r11, r2
 9ec:	88 f4       	brcc	.+34     	; 0xa10 <__stack+0x111>
 9ee:	28 0c       	add	r2, r8
 9f0:	92 2c       	mov	r9, r2
 9f2:	9b 18       	sub	r9, r11
 9f4:	0e c0       	rjmp	.+28     	; 0xa12 <__stack+0x113>
 9f6:	b2 14       	cp	r11, r2
 9f8:	60 f4       	brcc	.+24     	; 0xa12 <__stack+0x113>
 9fa:	b6 01       	movw	r22, r12
 9fc:	80 e2       	ldi	r24, 0x20	; 32
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a04:	b3 94       	inc	r11
 a06:	f7 cf       	rjmp	.-18     	; 0x9f6 <__stack+0xf7>
 a08:	b2 14       	cp	r11, r2
 a0a:	18 f4       	brcc	.+6      	; 0xa12 <__stack+0x113>
 a0c:	2b 18       	sub	r2, r11
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <__stack+0x115>
 a10:	98 2c       	mov	r9, r8
 a12:	21 2c       	mov	r2, r1
 a14:	a4 fe       	sbrs	r10, 4
 a16:	10 c0       	rjmp	.+32     	; 0xa38 <__stack+0x139>
 a18:	b6 01       	movw	r22, r12
 a1a:	80 e3       	ldi	r24, 0x30	; 48
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a22:	a2 fe       	sbrs	r10, 2
 a24:	17 c0       	rjmp	.+46     	; 0xa54 <__stack+0x155>
 a26:	a1 fc       	sbrc	r10, 1
 a28:	03 c0       	rjmp	.+6      	; 0xa30 <__stack+0x131>
 a2a:	88 e7       	ldi	r24, 0x78	; 120
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <__stack+0x135>
 a30:	88 e5       	ldi	r24, 0x58	; 88
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	b6 01       	movw	r22, r12
 a36:	0c c0       	rjmp	.+24     	; 0xa50 <__stack+0x151>
 a38:	8a 2d       	mov	r24, r10
 a3a:	86 78       	andi	r24, 0x86	; 134
 a3c:	59 f0       	breq	.+22     	; 0xa54 <__stack+0x155>
 a3e:	a1 fe       	sbrs	r10, 1
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <__stack+0x147>
 a42:	8b e2       	ldi	r24, 0x2B	; 43
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <__stack+0x149>
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	a7 fc       	sbrc	r10, 7
 a4a:	8d e2       	ldi	r24, 0x2D	; 45
 a4c:	b6 01       	movw	r22, r12
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a54:	89 14       	cp	r8, r9
 a56:	38 f4       	brcc	.+14     	; 0xa66 <__stack+0x167>
 a58:	b6 01       	movw	r22, r12
 a5a:	80 e3       	ldi	r24, 0x30	; 48
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a62:	9a 94       	dec	r9
 a64:	f7 cf       	rjmp	.-18     	; 0xa54 <__stack+0x155>
 a66:	8a 94       	dec	r8
 a68:	f3 01       	movw	r30, r6
 a6a:	e8 0d       	add	r30, r8
 a6c:	f1 1d       	adc	r31, r1
 a6e:	80 81       	ld	r24, Z
 a70:	b6 01       	movw	r22, r12
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a78:	81 10       	cpse	r8, r1
 a7a:	f5 cf       	rjmp	.-22     	; 0xa66 <__stack+0x167>
 a7c:	22 20       	and	r2, r2
 a7e:	09 f4       	brne	.+2      	; 0xa82 <__stack+0x183>
 a80:	42 ce       	rjmp	.-892    	; 0x706 <vfprintf+0x24>
 a82:	b6 01       	movw	r22, r12
 a84:	80 e2       	ldi	r24, 0x20	; 32
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a8c:	2a 94       	dec	r2
 a8e:	f6 cf       	rjmp	.-20     	; 0xa7c <__stack+0x17d>
 a90:	f6 01       	movw	r30, r12
 a92:	86 81       	ldd	r24, Z+6	; 0x06
 a94:	97 81       	ldd	r25, Z+7	; 0x07
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <__stack+0x19d>
 a98:	8f ef       	ldi	r24, 0xFF	; 255
 a9a:	9f ef       	ldi	r25, 0xFF	; 255
 a9c:	2b 96       	adiw	r28, 0x0b	; 11
 a9e:	e2 e1       	ldi	r30, 0x12	; 18
 aa0:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__epilogue_restores__>

00000aa4 <strnlen_P>:
 aa4:	fc 01       	movw	r30, r24
 aa6:	05 90       	lpm	r0, Z+
 aa8:	61 50       	subi	r22, 0x01	; 1
 aaa:	70 40       	sbci	r23, 0x00	; 0
 aac:	01 10       	cpse	r0, r1
 aae:	d8 f7       	brcc	.-10     	; 0xaa6 <strnlen_P+0x2>
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	8e 0f       	add	r24, r30
 ab6:	9f 1f       	adc	r25, r31
 ab8:	08 95       	ret

00000aba <strnlen>:
 aba:	fc 01       	movw	r30, r24
 abc:	61 50       	subi	r22, 0x01	; 1
 abe:	70 40       	sbci	r23, 0x00	; 0
 ac0:	01 90       	ld	r0, Z+
 ac2:	01 10       	cpse	r0, r1
 ac4:	d8 f7       	brcc	.-10     	; 0xabc <strnlen+0x2>
 ac6:	80 95       	com	r24
 ac8:	90 95       	com	r25
 aca:	8e 0f       	add	r24, r30
 acc:	9f 1f       	adc	r25, r31
 ace:	08 95       	ret

00000ad0 <fputc>:
 ad0:	0f 93       	push	r16
 ad2:	1f 93       	push	r17
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	fb 01       	movw	r30, r22
 ada:	23 81       	ldd	r18, Z+3	; 0x03
 adc:	21 fd       	sbrc	r18, 1
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <fputc+0x16>
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	9f ef       	ldi	r25, 0xFF	; 255
 ae4:	2c c0       	rjmp	.+88     	; 0xb3e <fputc+0x6e>
 ae6:	22 ff       	sbrs	r18, 2
 ae8:	16 c0       	rjmp	.+44     	; 0xb16 <fputc+0x46>
 aea:	46 81       	ldd	r20, Z+6	; 0x06
 aec:	57 81       	ldd	r21, Z+7	; 0x07
 aee:	24 81       	ldd	r18, Z+4	; 0x04
 af0:	35 81       	ldd	r19, Z+5	; 0x05
 af2:	42 17       	cp	r20, r18
 af4:	53 07       	cpc	r21, r19
 af6:	44 f4       	brge	.+16     	; 0xb08 <fputc+0x38>
 af8:	a0 81       	ld	r26, Z
 afa:	b1 81       	ldd	r27, Z+1	; 0x01
 afc:	9d 01       	movw	r18, r26
 afe:	2f 5f       	subi	r18, 0xFF	; 255
 b00:	3f 4f       	sbci	r19, 0xFF	; 255
 b02:	31 83       	std	Z+1, r19	; 0x01
 b04:	20 83       	st	Z, r18
 b06:	8c 93       	st	X, r24
 b08:	26 81       	ldd	r18, Z+6	; 0x06
 b0a:	37 81       	ldd	r19, Z+7	; 0x07
 b0c:	2f 5f       	subi	r18, 0xFF	; 255
 b0e:	3f 4f       	sbci	r19, 0xFF	; 255
 b10:	37 83       	std	Z+7, r19	; 0x07
 b12:	26 83       	std	Z+6, r18	; 0x06
 b14:	14 c0       	rjmp	.+40     	; 0xb3e <fputc+0x6e>
 b16:	8b 01       	movw	r16, r22
 b18:	ec 01       	movw	r28, r24
 b1a:	fb 01       	movw	r30, r22
 b1c:	00 84       	ldd	r0, Z+8	; 0x08
 b1e:	f1 85       	ldd	r31, Z+9	; 0x09
 b20:	e0 2d       	mov	r30, r0
 b22:	09 95       	icall
 b24:	89 2b       	or	r24, r25
 b26:	e1 f6       	brne	.-72     	; 0xae0 <fputc+0x10>
 b28:	d8 01       	movw	r26, r16
 b2a:	16 96       	adiw	r26, 0x06	; 6
 b2c:	8d 91       	ld	r24, X+
 b2e:	9c 91       	ld	r25, X
 b30:	17 97       	sbiw	r26, 0x07	; 7
 b32:	01 96       	adiw	r24, 0x01	; 1
 b34:	17 96       	adiw	r26, 0x07	; 7
 b36:	9c 93       	st	X, r25
 b38:	8e 93       	st	-X, r24
 b3a:	16 97       	sbiw	r26, 0x06	; 6
 b3c:	ce 01       	movw	r24, r28
 b3e:	df 91       	pop	r29
 b40:	cf 91       	pop	r28
 b42:	1f 91       	pop	r17
 b44:	0f 91       	pop	r16
 b46:	08 95       	ret

00000b48 <__ultoa_invert>:
 b48:	fa 01       	movw	r30, r20
 b4a:	aa 27       	eor	r26, r26
 b4c:	28 30       	cpi	r18, 0x08	; 8
 b4e:	51 f1       	breq	.+84     	; 0xba4 <__ultoa_invert+0x5c>
 b50:	20 31       	cpi	r18, 0x10	; 16
 b52:	81 f1       	breq	.+96     	; 0xbb4 <__ultoa_invert+0x6c>
 b54:	e8 94       	clt
 b56:	6f 93       	push	r22
 b58:	6e 7f       	andi	r22, 0xFE	; 254
 b5a:	6e 5f       	subi	r22, 0xFE	; 254
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	af 4f       	sbci	r26, 0xFF	; 255
 b64:	b1 e0       	ldi	r27, 0x01	; 1
 b66:	3e d0       	rcall	.+124    	; 0xbe4 <__ultoa_invert+0x9c>
 b68:	b4 e0       	ldi	r27, 0x04	; 4
 b6a:	3c d0       	rcall	.+120    	; 0xbe4 <__ultoa_invert+0x9c>
 b6c:	67 0f       	add	r22, r23
 b6e:	78 1f       	adc	r23, r24
 b70:	89 1f       	adc	r24, r25
 b72:	9a 1f       	adc	r25, r26
 b74:	a1 1d       	adc	r26, r1
 b76:	68 0f       	add	r22, r24
 b78:	79 1f       	adc	r23, r25
 b7a:	8a 1f       	adc	r24, r26
 b7c:	91 1d       	adc	r25, r1
 b7e:	a1 1d       	adc	r26, r1
 b80:	6a 0f       	add	r22, r26
 b82:	71 1d       	adc	r23, r1
 b84:	81 1d       	adc	r24, r1
 b86:	91 1d       	adc	r25, r1
 b88:	a1 1d       	adc	r26, r1
 b8a:	20 d0       	rcall	.+64     	; 0xbcc <__ultoa_invert+0x84>
 b8c:	09 f4       	brne	.+2      	; 0xb90 <__ultoa_invert+0x48>
 b8e:	68 94       	set
 b90:	3f 91       	pop	r19
 b92:	2a e0       	ldi	r18, 0x0A	; 10
 b94:	26 9f       	mul	r18, r22
 b96:	11 24       	eor	r1, r1
 b98:	30 19       	sub	r19, r0
 b9a:	30 5d       	subi	r19, 0xD0	; 208
 b9c:	31 93       	st	Z+, r19
 b9e:	de f6       	brtc	.-74     	; 0xb56 <__ultoa_invert+0xe>
 ba0:	cf 01       	movw	r24, r30
 ba2:	08 95       	ret
 ba4:	46 2f       	mov	r20, r22
 ba6:	47 70       	andi	r20, 0x07	; 7
 ba8:	40 5d       	subi	r20, 0xD0	; 208
 baa:	41 93       	st	Z+, r20
 bac:	b3 e0       	ldi	r27, 0x03	; 3
 bae:	0f d0       	rcall	.+30     	; 0xbce <__ultoa_invert+0x86>
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__ultoa_invert+0x5c>
 bb2:	f6 cf       	rjmp	.-20     	; 0xba0 <__ultoa_invert+0x58>
 bb4:	46 2f       	mov	r20, r22
 bb6:	4f 70       	andi	r20, 0x0F	; 15
 bb8:	40 5d       	subi	r20, 0xD0	; 208
 bba:	4a 33       	cpi	r20, 0x3A	; 58
 bbc:	18 f0       	brcs	.+6      	; 0xbc4 <__ultoa_invert+0x7c>
 bbe:	49 5d       	subi	r20, 0xD9	; 217
 bc0:	31 fd       	sbrc	r19, 1
 bc2:	40 52       	subi	r20, 0x20	; 32
 bc4:	41 93       	st	Z+, r20
 bc6:	02 d0       	rcall	.+4      	; 0xbcc <__ultoa_invert+0x84>
 bc8:	a9 f7       	brne	.-22     	; 0xbb4 <__ultoa_invert+0x6c>
 bca:	ea cf       	rjmp	.-44     	; 0xba0 <__ultoa_invert+0x58>
 bcc:	b4 e0       	ldi	r27, 0x04	; 4
 bce:	a6 95       	lsr	r26
 bd0:	97 95       	ror	r25
 bd2:	87 95       	ror	r24
 bd4:	77 95       	ror	r23
 bd6:	67 95       	ror	r22
 bd8:	ba 95       	dec	r27
 bda:	c9 f7       	brne	.-14     	; 0xbce <__ultoa_invert+0x86>
 bdc:	00 97       	sbiw	r24, 0x00	; 0
 bde:	61 05       	cpc	r22, r1
 be0:	71 05       	cpc	r23, r1
 be2:	08 95       	ret
 be4:	9b 01       	movw	r18, r22
 be6:	ac 01       	movw	r20, r24
 be8:	0a 2e       	mov	r0, r26
 bea:	06 94       	lsr	r0
 bec:	57 95       	ror	r21
 bee:	47 95       	ror	r20
 bf0:	37 95       	ror	r19
 bf2:	27 95       	ror	r18
 bf4:	ba 95       	dec	r27
 bf6:	c9 f7       	brne	.-14     	; 0xbea <__ultoa_invert+0xa2>
 bf8:	62 0f       	add	r22, r18
 bfa:	73 1f       	adc	r23, r19
 bfc:	84 1f       	adc	r24, r20
 bfe:	95 1f       	adc	r25, r21
 c00:	a0 1d       	adc	r26, r0
 c02:	08 95       	ret

00000c04 <__prologue_saves__>:
 c04:	2f 92       	push	r2
 c06:	3f 92       	push	r3
 c08:	4f 92       	push	r4
 c0a:	5f 92       	push	r5
 c0c:	6f 92       	push	r6
 c0e:	7f 92       	push	r7
 c10:	8f 92       	push	r8
 c12:	9f 92       	push	r9
 c14:	af 92       	push	r10
 c16:	bf 92       	push	r11
 c18:	cf 92       	push	r12
 c1a:	df 92       	push	r13
 c1c:	ef 92       	push	r14
 c1e:	ff 92       	push	r15
 c20:	0f 93       	push	r16
 c22:	1f 93       	push	r17
 c24:	cf 93       	push	r28
 c26:	df 93       	push	r29
 c28:	cd b7       	in	r28, 0x3d	; 61
 c2a:	de b7       	in	r29, 0x3e	; 62
 c2c:	ca 1b       	sub	r28, r26
 c2e:	db 0b       	sbc	r29, r27
 c30:	0f b6       	in	r0, 0x3f	; 63
 c32:	f8 94       	cli
 c34:	de bf       	out	0x3e, r29	; 62
 c36:	0f be       	out	0x3f, r0	; 63
 c38:	cd bf       	out	0x3d, r28	; 61
 c3a:	09 94       	ijmp

00000c3c <__epilogue_restores__>:
 c3c:	2a 88       	ldd	r2, Y+18	; 0x12
 c3e:	39 88       	ldd	r3, Y+17	; 0x11
 c40:	48 88       	ldd	r4, Y+16	; 0x10
 c42:	5f 84       	ldd	r5, Y+15	; 0x0f
 c44:	6e 84       	ldd	r6, Y+14	; 0x0e
 c46:	7d 84       	ldd	r7, Y+13	; 0x0d
 c48:	8c 84       	ldd	r8, Y+12	; 0x0c
 c4a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c4c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c4e:	b9 84       	ldd	r11, Y+9	; 0x09
 c50:	c8 84       	ldd	r12, Y+8	; 0x08
 c52:	df 80       	ldd	r13, Y+7	; 0x07
 c54:	ee 80       	ldd	r14, Y+6	; 0x06
 c56:	fd 80       	ldd	r15, Y+5	; 0x05
 c58:	0c 81       	ldd	r16, Y+4	; 0x04
 c5a:	1b 81       	ldd	r17, Y+3	; 0x03
 c5c:	aa 81       	ldd	r26, Y+2	; 0x02
 c5e:	b9 81       	ldd	r27, Y+1	; 0x01
 c60:	ce 0f       	add	r28, r30
 c62:	d1 1d       	adc	r29, r1
 c64:	0f b6       	in	r0, 0x3f	; 63
 c66:	f8 94       	cli
 c68:	de bf       	out	0x3e, r29	; 62
 c6a:	0f be       	out	0x3f, r0	; 63
 c6c:	cd bf       	out	0x3d, r28	; 61
 c6e:	ed 01       	movw	r28, r26
 c70:	08 95       	ret

00000c72 <_exit>:
 c72:	f8 94       	cli

00000c74 <__stop_program>:
 c74:	ff cf       	rjmp	.-2      	; 0xc74 <__stop_program>
