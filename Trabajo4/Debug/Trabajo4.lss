
Trabajo4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800116  00800116  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0e  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085a  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f5  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000021a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000439  00000000  00000000  00002983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
void PWM_soft_update(void);                                                                                                                                                                                                                                                                                                                                     


int main(void)
{
	DDRB |= (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB5);	// Configuramos como salida.
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	86 62       	ori	r24, 0x26	; 38
  aa:	84 b9       	out	0x04, r24	; 4
	 SerialPort_Init(BR9600); 			// Inicializo formato 8N1 y BAUDRATE = 9600bps
  ac:	87 e6       	ldi	r24, 0x67	; 103
  ae:	0e 94 34 01 	call	0x268	; 0x268 <SerialPort_Init>
	 SerialPort_TX_Enable();				// Activo el Transmisor del Puerto Serie
  b2:	0e 94 3e 01 	call	0x27c	; 0x27c <SerialPort_TX_Enable>
	 SerialPort_RX_Enable();				// Activo el Receptor del Puerto Serie
  b6:	0e 94 44 01 	call	0x288	; 0x288 <SerialPort_RX_Enable>
	 SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion.
  ba:	0e 94 4a 01 	call	0x294	; 0x294 <SerialPort_RX_Interrupt_Enable>

	cli();
  be:	f8 94       	cli
    timer0_init();
  c0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <timer0_init>
	timer1_init();
  c4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <timer1_init>
	sei();
  c8:	78 94       	sei
    while (1) 
    {
		if(flag_Green){
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_Green>
  ce:	88 23       	and	r24, r24
  d0:	71 f0       	breq	.+28     	; 0xee <main+0x48>
			// Mandar medida del potenciometro al color verde
			setGreen(0);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 98 01 	call	0x330	; 0x330 <setGreen>
			setBlue(255);
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 93 01 	call	0x326	; 0x326 <setBlue>
			intensidadRojo=100;
  e2:	84 e6       	ldi	r24, 0x64	; 100
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(flag_Blue){
  ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag_Blue>
  f2:	88 23       	and	r24, r24
  f4:	71 f0       	breq	.+28     	; 0x112 <main+0x6c>
			// Mandar medida del potenciometro al color azul
			setBlue(0);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 93 01 	call	0x326	; 0x326 <setBlue>
			setGreen(255);
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 98 01 	call	0x330	; 0x330 <setGreen>
			intensidadRojo=100;
 106:	84 e6       	ldi	r24, 0x64	; 100
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(flag_Red){
 112:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <flag_Red>
 116:	88 23       	and	r24, r24
 118:	c1 f2       	breq	.-80     	; 0xca <main+0x24>
			// Mandar medida del potenciometro al color rojo
			setBlue(255);
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 93 01 	call	0x326	; 0x326 <setBlue>
			setGreen(255);	
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 98 01 	call	0x330	; 0x330 <setGreen>
			intensidadRojo=0;
 12a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	cb cf       	rjmp	.-106    	; 0xca <main+0x24>

00000134 <PWM_soft_update>:
	PWM_soft_update();
}

void PWM_soft_update(void){
	static uint16_t PWM_position=0;
	if (++PWM_position>=PWM_PERIOD){
 134:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 138:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 142:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 146:	84 36       	cpi	r24, 0x64	; 100
 148:	91 05       	cpc	r25, r1
 14a:	20 f0       	brcs	.+8      	; 0x154 <PWM_soft_update+0x20>
		PWM_position=0;
 14c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 150:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
	}
	if(PWM_position<intensidadRojo){
 154:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__data_end>
 158:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__data_end+0x1>
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	28 17       	cp	r18, r24
 166:	39 07       	cpc	r19, r25
 168:	20 f4       	brcc	.+8      	; 0x172 <PWM_soft_update+0x3e>
		PWM_ON;
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	85 b9       	out	0x05, r24	; 5
 170:	08 95       	ret
	}
	else{
		PWM_OFF;
 172:	85 b1       	in	r24, 0x05	; 5
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	85 b9       	out	0x05, r24	; 5
 178:	08 95       	ret

0000017a <__vector_14>:
		}
    }
}

ISR (TIMER0_COMPA_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	PWM_soft_update();
 19c:	0e 94 9a 00 	call	0x134	; 0x134 <PWM_soft_update>
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_18>:
	}
}


// Rutina de Servicio de Interrupción de Byte Recibido
ISR(USART_RX_vect) {
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	RX_Buffer = UDR0; // La lectura de UDR0 borra el flag RXC
 1e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1e8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <RX_Buffer>

	if (RX_Buffer == 'B') { // Comprobar si el carácter recibido es 's' o 'S'
 1ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <RX_Buffer>
 1f0:	82 34       	cpi	r24, 0x42	; 66
 1f2:	59 f4       	brne	.+22     	; 0x20a <__vector_18+0x48>
		SerialPort_Send_String("blueee"); // Pausar la transmisión si ya se había iniciado
 1f4:	85 e0       	ldi	r24, 0x05	; 5
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <SerialPort_Send_String>
			flag_Blue=1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag_Blue>
			flag_Red=0;
 202:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag_Red>
			flag_Green=0;
 206:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_Green>
		}
	if (RX_Buffer == 'R') { // Comprobar si el carácter recibido es 's' o 'S'
 20a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <RX_Buffer>
 20e:	82 35       	cpi	r24, 0x52	; 82
 210:	59 f4       	brne	.+22     	; 0x228 <__vector_18+0x66>
				SerialPort_Send_String("red"); // Pausar la transmisión si ya se había iniciado
 212:	8c e0       	ldi	r24, 0x0C	; 12
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 58 01 	call	0x2b0	; 0x2b0 <SerialPort_Send_String>

		flag_Blue=0;
 21a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag_Blue>
		flag_Red=1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <flag_Red>
		flag_Green=0;
 224:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_Green>
	}
	if (RX_Buffer == 'G') { // Comprobar si el carácter recibido es 's' o 'S'
 228:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <RX_Buffer>
 22c:	87 34       	cpi	r24, 0x47	; 71
 22e:	59 f4       	brne	.+22     	; 0x246 <__vector_18+0x84>
				SerialPort_Send_String("green"); // Pausar la transmisión si ya se había iniciado
 230:	80 e1       	ldi	r24, 0x10	; 16
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 58 01 	call	0x2b0	; 0x2b0 <SerialPort_Send_String>

		flag_Blue=0;
 238:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag_Blue>
		flag_Red=0;
 23c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag_Red>
		flag_Green=1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_Green>
	}

 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 268:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 26c:	96 e0       	ldi	r25, 0x06	; 6
 26e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 272:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 276:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 27a:	08 95       	ret

0000027c <SerialPort_TX_Enable>:
 27c:	e1 ec       	ldi	r30, 0xC1	; 193
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	88 60       	ori	r24, 0x08	; 8
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 288:	e1 ec       	ldi	r30, 0xC1	; 193
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	80 83       	st	Z, r24
 292:	08 95       	ret

00000294 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 294:	e1 ec       	ldi	r30, 0xC1	; 193
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	80 83       	st	Z, r24
 29e:	08 95       	ret

000002a0 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 2a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <SerialPort_Wait_For_TX_Buffer_Free>
}
 2a8:	08 95       	ret

000002aa <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 2aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ae:	08 95       	ret

000002b0 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 2c0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 2c4:	f8 01       	movw	r30, r16
 2c6:	80 81       	ld	r24, Z
 2c8:	0e 94 55 01 	call	0x2aa	; 0x2aa <SerialPort_Send_Data>
		i++;
 2cc:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 2ce:	87 01       	movw	r16, r14
 2d0:	0c 0f       	add	r16, r28
 2d2:	11 1d       	adc	r17, r1
 2d4:	f8 01       	movw	r30, r16
 2d6:	80 81       	ld	r24, Z
 2d8:	81 11       	cpse	r24, r1
 2da:	f2 cf       	rjmp	.-28     	; 0x2c0 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	08 95       	ret

000002e8 <timer0_init>:
#include <avr/io.h>
#include <avr/interrupt.h>

// Frecuencia de 100Hz
void timer0_init(){    // Configuración del timer
	TCCR0A=0x02; // Modo CTC
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler de 64
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	95 bd       	out	0x25, r25	; 37
	OCR0A = 25;
 2f0:	99 e1       	ldi	r25, 0x19	; 25
 2f2:	97 bd       	out	0x27, r25	; 39
	TIMSK0=0x02; // Habilito Interrupción por comparación
 2f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei();    // Se activan las interrupciones
 2f8:	78 94       	sei
 2fa:	08 95       	ret

000002fc <timer1_init>:
}

// Configuramos el timer con una frecuencia de 7812.5 Hz, mayor a los 50 Hz requeridos
// Inicialmente configuaramos el comparadoer en 0, led apagado
void timer1_init(){
	OCR1A = 255;							// Blue
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 304:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 255;							// Verde
 308:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 30c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);	// Modo 5 fast no invertido
 310:	81 ea       	ldi	r24, 0xA1	; 161
 312:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B =  (1<<WGM12) | (1<<CS10);		// prescaler 8
 316:	89 e0       	ldi	r24, 0x09	; 9
 318:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Reiniciar contador a cero 
	TCNT1 = 0;
 31c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 320:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 324:	08 95       	ret

00000326 <setBlue>:
}

void setBlue (uint16_t intensidad){
	OCR1A = intensidad;
 326:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 32a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 32e:	08 95       	ret

00000330 <setGreen>:
}
void setGreen (uint16_t intensidad){
	OCR1B = intensidad;
 330:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 334:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 338:	08 95       	ret

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
